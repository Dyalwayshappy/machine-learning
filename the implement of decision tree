
import numpy as np
import matplotlib.pyplot as plt

#help a company identify the mushroom is edible or posionous
#the features is （cap color（brown or red）， stalk shape（tapering or enlarging），solitary（是否独自生长））
#data set
#(first 1 means 'brown', 0 means 'red')(second 1 means 'tapering', 0 means 'enlarging')(third 1 means 'yes', 0 means 'no')
X_train = np.array([[1,1,1],[1,0,1],[1,0,0],[1,0,0],[1,1,1],[0,1,1],[0,0,0],[1,0,1],[0,1,0],[1,0,0]])
y_train = np.array([1,1,0,0,1,0,0,1,1,0])
#check the data
#print("First few elements of X_train:\n", X_train[:5])
#print("Type of X_train:",type(X_train))

#print("First few elements of y_train:", y_train[:5])
#print("Type of y_train:",type(y_train))
#check the dimensions of the data
print ('The shape of X_train is:', X_train.shape)
print ('The shape of y_train is: ', y_train.shape)
print ('Number of training examples (m):', len(X_train))


def compute_entropy(y):
    entropy = 0.

    ### START CODE HERE ###
    if len(y) != 0:
        p1 = len(y[y==1]) / len(y) #将p1转化为概率值
        if p1 != 0 and p1 != 1:
            entropy = -p1 * np.log2(p1) - (1 - p1) * np.log2(1 - p1)
        else:
            entropy = 0
    ### END CODE HERE ###
    return entropy

# Compute entropy at the root node (with all examples)
# Since we have 5 edible and 5 non-edible mushrooms, the entropy should be 1"
print("Entropy at root node: ", compute_entropy(y_train))


def split_dataset(X, node_indices, feature):

    # You need to return the following variables correctly
    left_indices = []
    right_indices = []

    ### START CODE HERE ###
    for i in node_indices:
        if X[i][feature] == 1:  #check如果这里的feature判断结果是1则去到左边（检查样本i在特征feature上的值为1 or 0）
            left_indices.append(i)
        else:
            right_indices.append(i)
    ### END CODE HERE ###
    return left_indices, right_indices
root_indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# Feel free to play around with these variables
# The dataset only has three features, so this value can be 0 (Brown Cap), 1 (Tapering Stalk Shape) or 2 (Solitary)
feature = 0

left_indices, right_indices = split_dataset(X_train, root_indices, feature)

print("Left indices: ", left_indices)
print("Right indices: ", right_indices)



def compute_information_gain(X, y, node_indices, feature):
    # Split dataset
    left_indices, right_indices = split_dataset(X, node_indices, feature)

    # Some useful variables
    X_node, y_node = X[node_indices], y[node_indices]
    X_left, y_left = X[left_indices], y[left_indices]
    X_right, y_right = X[right_indices], y[right_indices]

    # You need to return the following variables correctly
    information_gain = 0

    ### START CODE HERE ###
    #计算entropy
    node_entropy = compute_entropy(y_node)
    left_entropy = compute_entropy(y_left)
    right_entropy = compute_entropy(y_right)
    #计算w（子集在当前样本中的权重）
    w_left = len(X_left) / len(X_node)
    w_right = len(X_right) / len(X_node)
    # Weighted entropy
    weighted_entropy = w_left * left_entropy + w_right * right_entropy
    # Information gain
    information_gain = node_entropy - weighted_entropy
    ### END CODE HERE ###
    return information_gain

info_gain0 = compute_information_gain(X_train, y_train, root_indices, feature=0)
print("Information Gain from splitting the root on brown cap: ", info_gain0)

info_gain1 = compute_information_gain(X_train, y_train, root_indices, feature=1)
print("Information Gain from splitting the root on tapering stalk shape: ", info_gain1)

info_gain2 = compute_information_gain(X_train, y_train, root_indices, feature=2)
print("Information Gain from splitting the root on solitary: ", info_gain2)
#the entropy on featuer 2 （solitary） is the largest（choose the solitary）


def get_best_split(X, y, node_indices):

    # Some useful variables
    num_features = X.shape[1]

    # You need to return the following variables correctly
    best_feature = -1 #表示当前没有最佳特征

    max_information_gain = 0 #(初始化)
    for feature in range(num_features):
        info_gain = compute_information_gain(X, y, node_indices, feature)
        if info_gain > max_information_gain:
            max_information_gain = info_gain
            best_feature = feature
    return best_feature

best_feature = get_best_split(X_train, y_train, root_indices)
print("Best feature to split on: %d" % best_feature)

#build a tree
tree = [] #初始化（存储节点信息）
def build_tree_recursive(X, y, node_indices, branch_name, max_depth, current_depth):

    # Maximum depth reached - stop splitting
    if current_depth == max_depth:
        formatting = " " * current_depth + "-" * current_depth
        print(formatting, "%s leaf node with indices" % branch_name, node_indices)
        return

    # Otherwise, get best split and split the data
    # Get the best feature and threshold at this node
    best_feature = get_best_split(X, y, node_indices)
    tree.append((current_depth, branch_name, best_feature, node_indices))

    formatting = "-" * current_depth
    print("%s Depth %d, %s: Split on feature: %d" % (formatting, current_depth, branch_name, best_feature))

    # Split the dataset at the best feature
    left_indices, right_indices = split_dataset(X, node_indices, best_feature)

    # continue splitting the left and the right child. Increment current depth
    build_tree_recursive(X, y, left_indices, "Left", max_depth, current_depth + 1)
    build_tree_recursive(X, y, right_indices, "Right", max_depth, current_depth + 1)

#改进
#除了深度限制，可以增加其他条件，例如样本数量过少或样本标签完全相同，这样可以进一步提高树的有效性。
#如果要进行后续分析，考虑以更结构化的方式保存树，比如使用字典或其他数据结构，而不仅仅是列表。
#考虑在函数中加入异常处理机制，以处理输入数据不符合预期的情况，例如空数据集等。



