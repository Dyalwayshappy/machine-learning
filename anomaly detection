import numpy as np
import matplotlib.pyplot as plt
from utils import *

X_train1, X_val1, y_val1 = load_data()
print ('The shape of X_train is:', X_train1.shape)
print ('The shape of X_val is:', X_val1.shape)
print ('The shape of y_val is: ', y_val1.shape)



#visualize
plt.scatter(X_train[:, 0], X_train[:, 1], marker='x', c='b')

# Set the title
plt.title("The first dataset")
# Set the y-axis label
plt.ylabel('Throughput (mb/s)')
# Set the x-axis label
plt.xlabel('Latency (ms)')
# Set axis range
plt.axis([0, 30, 0, 30])
plt.show()


def estimate_gaussian(X):
    m, n = X.shape
    mu  = 1/m * np.sum(X,axis = 0)
    var = 1/m * np.sum((X - mu ) ** 2, axis =0)
    return mu, var



mu, var = estimate_gaussian(X_train)

print("Mean of each feature:", mu)
print("Variance of each feature:", var)


# Returns the density of the multivariate normal
# at each data point (row) of X_train
p = multivariate_gaussian(X_train, mu, var)

#Plotting code
visualize_fit(X_train, mu, var)


# UNQ_C2
# GRADED FUNCTION: select_threshold

def select_threshold(y_val, p_val):

    best_epsilon = 0
    best_F1 = 0
    F1 = 0

    step_size = (max(p_val) - min(p_val)) / 1000

    for epsilon in np.arange(min(p_val), max(p_val), step_size):
        prediction  = (p_val < epsilon)
        tp = np.sum(predictions == 1 ) & (y_val == 1)
        fp = np.sum(predictions == 0 ) & (y_val == 1)
        fn = np.sum(predictions == 0) & (y_val == 1)
        prec = tp / (tp+fp)
        rec = tp / (tp + fn)
        F1 = 2 * prec *rec / (prec + rec)
        if F1 > best_F1:
            best_F1 = F1
            best_epsilon = epsilon

    return best_epsilon, best_F1


p_val = multivariate_gaussian(X_val, mu, var)
epsilon, F1 = select_threshold(y_val, p_val)

print('Best epsilon found using cross-validation: %e' % epsilon)
print('Best F1 on Cross Validation Set: %f' % F1)

# Find the outliers in the training set
outliers = p < epsilon

# Visualize the fit
visualize_fit(X_train, mu, var)

# Draw a red circle around those outliers
plt.plot(X_train[outliers, 0], X_train[outliers, 1], 'ro',
         markersize= 10,markerfacecolor='none', markeredgewidth=2)
