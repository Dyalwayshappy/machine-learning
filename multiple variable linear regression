import copy, math
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('deeplearning.mplstyle')
np.set_printoptions(precision=2) # reduced display precision on numpy arrays 降低numpy数组的显示精度， 在这里显示2位小数
#'np.set_printoptions'
# 1. precosion ： 用于控制小数的显示精度，默认值为8
# 2. threshold ： 当数组元素总数过大时，设置显示的数字位数，其余用省略号代替(当数组元素总数大于设置值，控制输出值得个数为6个，当数组元素小于或者等于设置值得时候，全部显示)，当设置值为sys.maxsize(需要导入sys库)，则会输出所有元素
# 3. linewidth ： 每行字符的数目，其余的数值会换到下一行
# 4. suppress  ： 小数是否需要以科学计数法的形式输出
# 5. formatter ： 自定义输出规则
#下列是我们这次会使用的表格，有三个例子，每个都具有四个特征，分别是：面积，房间数量，楼层，和age
#| Size (sqft) | Number of Bedrooms  | Number of floors | Age of  Home | Price (1000s dollars)  |
#| ----------------| ------------------- |----------------- |--------------|-------------- |
# 2104            | 5                   | 1                | 45           | 460           |
#| 1416            | 3                   | 2                | 40           | 232           |
#| 852             | 2                   | 1                | 35           | 178           |
X_train = np.array([[2104,5,1,45], [1416,3,2,40], [852,2,1,35]])
y_train = np.array([460,232,178])
#用一个矩阵包含我们的例子(m,n), m是我们的有多少个例子， n是每个例子有几个特征量
#data is stored in numpy array/matrix 将数据存储在numpy矩阵中
print(f"X Shape: {X_train.shape}, X Type:{type(X_train)})")
print(X_train)
print(f"y Shape: {y_train.shape}, y Type:{type(y_train)})")
print(y_train)
#接下来是我们的系数w和b
#w是一个有n个元素的向量，因为w是我们特征量的系数，在这里我们的n是4
#b只是一个标量
#w是一个简单一维向量 为了简单的演示，我们会选择一些接近最佳值的初始选定值
b_init = 785.1811367994083
w_init = np.array([ 0.39133535, 18.75376741, -53.36032453, -26.42131618])
print(f"w_init shape: {w_init.shape}, b_init type: {type(b_init)}") #这里w是一个四行一列的vector， b是一个浮点数
print('----------------------')
#接下来就是预测
#线性回归多特征量的模型就是fx = w1x + w2x + .... + wn-1xn-1 + b
#因为x和w都是vector，这里就用到点乘思想
def predict_single_loop(x, w, b):
    """
    single predict using linear regression

    Args:
      x (ndarray): Shape (n,) example with multiple features
      w (ndarray): Shape (n,) model parameters
      b (scalar):  model parameter

    Returns:
      p (scalar):  prediction
    """
    n = x.shape[0]
    p = 0
    for i in range(n):
        p_i = x[i] * w[i]
        p = p + p_i
    p = p + b
    return p
#p就是我们的预测值，n是特征向量，通过之前单一特征的预测，然后循环获得多个特征量的预测结果。
# get a row from our training data   这里从我们的训练中获取一行
x_vec = X_train[0,:]
print(f"x_vec shape {x_vec.shape}, x_vec value: {x_vec}")

# make a prediction  拿到预测结果
f_wb = predict_single_loop(x_vec, w_init, b_init)
print(f"f_wb shape {f_wb.shape}, prediction: {f_wb}") #x_vec是一个四行一列的向量， f_wb是一个预测结果，是一个标量，实际为一个floating
#可以看到第一个例子我们的预测结果为459.9999,实际答案为460，非常接近
print('--------------')
#上述是最普通直接的办法
#我们上述已经说了，将我们的数据都创造成了矩阵，我们也可以通过对两个矩阵的点乘获取一个新的矩阵，到达目标
def predict(x, w, b):
    """
    single predict using linear regression
    Args:
      x (ndarray): Shape (n,) example with multiple features
      w (ndarray): Shape (n,) model parameters
      b (scalar):             model parameter

    Returns:
      p (scalar):  prediction
    """
    p = np.dot(x, w) + b
    return p
#这的返回预测值仍然是一个标量scalar
#get a row from our training data
x_vec = X_train[1,:]
print(f"x_vec shape {x_vec.shape}, x_vec value: {x_vec}")

# make a prediction
f_wb = predict(x_vec,w_init, b_init)
print(f"f_wb shape {f_wb.shape}, prediction: {f_wb}")
#进行了测试演示，输出值为231.9999, 与232非常接近
#点乘是最好的方法也是我们最常用需要学习的方法
print('--------------')
#下面是多个特征量的cost function
def compute_cost(X,y,w,b):
    """
        compute cost
        Args:
          X (ndarray (m,n)): Data, m examples with n features
          y (ndarray (m,)) : target values
          w (ndarray (n,)) : model parameters
          b (scalar)       : model parameter

        Returns:
          cost (scalar): cost
        """
    m = X.shape[0]  #计算我们样本例子的数量
    cost = 0.0 #初始化cost值为0
    for i in range(m): #遍历每一个样本
        f_wb_i = np.dot(X[i], w) + b #用点乘计算预测值
        cost = cost + (f_wb_i - y[i])**2 #计算成本，计算预测值与实际值之间的差的平方，然后赋值给cost
    cost = cost / (2*m) #总成本除以2m为了后续数学计算更方便，具体可以看除以2m的求导后结果
    return cost
#名为平方误差成本函数，最常用的cost function
# Compute and display cost using our pre-chosen optimal parameters. 计算一下成本
cost = compute_cost(X_train, y_train, w_init, b_init)
print(f'Cost at optimal w : {cost}')
#根据显示结果，很接近0，证明我们选择的w和b非常合适
print('-------------------')
#最后是多特征的梯度下降
#Wj = Wj - learning rate * Wj关于wb的导数， j = 0....n-1之间(n是特征向量的数量)
def compute_gradient(X, y, w, b):
    """
    Computes the gradient for linear regression
    Args:
      X (ndarray (m,n)): Data, m examples with n features
      y (ndarray (m,)) : target values
      w (ndarray (n,)) : model parameters
      b (scalar)       : model parameter

    Returns:
      dj_dw (ndarray (n,)): The gradient of the cost w.r.t. the parameters w.
      dj_db (scalar):       The gradient of the cost w.r.t. the parameter b.
    """
    m, n = X.shape  # (number of examples, number of features) #计算样本和特征数量
    dj_dw = np.zeros((n,)) #创建零数组，存储梯度
    dj_db = 0. #初始化b的梯度为0

    for i in range(m): #遍历样本
        err = (np.dot(X[i], w) + b) - y[i] #计算误差
        for j in range(n): #遍历特征量
            dj_dw[j] = dj_dw[j] + err * X[i, j] #计算损失函数对参数w的偏导数及梯度
        dj_db = dj_db + err #计算损失函数对参数b的偏导数及梯度
    dj_dw = dj_dw / m  #梯度是对整个训练集中所有样本的误差的平均值，所以计算出每个样本的梯度然后累积，最后除以m算出平均梯度
    dj_db = dj_db / m

    return dj_db, dj_dw #返回梯度

#Compute and display gradient  这是示例计算，计算显示梯度
tmp_dj_db, tmp_dj_dw = compute_gradient(X_train, y_train, w_init, b_init)
print(f'dj_db at initial w,b: {tmp_dj_db}')
print(f'dj_dw at initial w,b: \n {tmp_dj_dw}')

#下面是实现梯度下降的实际写法，通过同时更新alpha和w，b来找到最合适的w和b
def gradient_descent(X, y, w_in, b_in, cost_function, gradient_function, alpha, num_iters):
    """
    Performs batch gradient descent to learn theta. Updates theta by taking
    num_iters gradient steps with learning rate alpha

    Args:
      X (ndarray (m,n))   : Data, m examples with n features
      y (ndarray (m,))    : target values
      w_in (ndarray (n,)) : initial model parameters
      b_in (scalar)       : initial model parameter
      cost_function       : function to compute cost
      gradient_function   : function to compute the gradient
      alpha (float)       : Learning rate
      num_iters (int)     : number of iterations to run gradient descent

    Returns:
      w (ndarray (n,)) : Updated values of parameters
      b (scalar)       : Updated value of parameter
      """

    # An array to store cost J and w's at each iteration primarily for graphing later
    J_history = [] #空列表，存储每次迭代后成本函数值
    w = copy.deepcopy(w_in)  # avoid modifying global w within function #避免修改全局变量w_in
    b = b_in  #给b赋值

    for i in range(num_iters): #迭代

        # Calculate the gradient and update the parameters
        dj_db, dj_dw = gradient_function(X, y, w, b)  ##None #计算梯度

        # Update Parameters using w, b, alpha and gradient #更新权重参数
        w = w - alpha * dj_dw  ##None
        b = b - alpha * dj_db  ##None

        # Save cost J at each iteration  将每次迭代后的成本值加入J_history 防止资源耗尽
        if i < 100000:  # prevent resource exhaustion
            J_history.append(cost_function(X, y, w, b))

        # Print cost every at intervals 10 times or as many iterations if < 10 每隔迭代十次打印一次成本函数值
        if i % math.ceil(num_iters / 10) == 0:
            print(f"Iteration {i:4d}: Cost {J_history[-1]:8.2f}   ")

    return w, b, J_history  # return final w,b and J history for graphing  #返回更新后的w和b以及成本函数的变化记录
print('------------------')

#下面是测试
# initialize parameters
initial_w = np.zeros_like(w_init)
initial_b = 0.
# some gradient descent settings
iterations = 1000 #迭代1000次
alpha = 5.0e-7   #学习率
# run gradient descent
w_final, b_final, J_hist = gradient_descent(X_train, y_train, initial_w, initial_b,compute_cost, compute_gradient,alpha, iterations)
print(f"b,w found by gradient descent: {b_final:0.2f},{w_final} ")
m,_ = X_train.shape
for i in range(m):
    print(f"prediction: {np.dot(X_train[i], w_final) + b_final:0.2f}, target value: {y_train[i]}")


#绘制成本函数图
# plot cost versus iteration
fig, (ax1, ax2) = plt.subplots(1, 2, constrained_layout=True, figsize=(12, 4))
ax1.plot(J_hist)
ax2.plot(100 + np.arange(len(J_hist[100:])), J_hist[100:])
ax1.set_title("Cost vs. iteration");  ax2.set_title("Cost vs. iteration (tail)")
ax1.set_ylabel('Cost')             ;  ax2.set_ylabel('Cost')
ax1.set_xlabel('iteration step')   ;  ax2.set_xlabel('iteration step')
plt.show()




