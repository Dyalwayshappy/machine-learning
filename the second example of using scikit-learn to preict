import numpy as np
from sklearn.linear_model import LinearRegression, SGDRegressor
from sklearn.preprocessing import StandardScaler
from lab_utils_multi import  load_house_data
import matplotlib.pyplot as plt
dlblue = '#0096ff'; dlorange = '#FF9300'; dldarkred='#C00000'; dlmagenta='#FF40FF'; dlpurple='#7030A0';
plt.style.use('./deeplearning.mplstyle')
#第二个例子是一个非标准化预测的例子
#第一步载入房屋数据
X_train, y_train = load_house_data()
#定义特征列
X_features = ['size(sqft)', 'bedrooms', 'floors', 'age']
#初始化线性回归模型
linear_model = LinearRegression()
#拟合模型
linear_model.fit(X_train, y_train)
#获取模型的参数截距b和斜率w
b = linear_model.intercept_
w = linear_model.coef_
#打印参数w和b
print(f"w = {w:}, b = {b:0.2f}") #0.2f是以浮点数打印b且保留两位小数

#先对训练集的前四个样本进行预测，并打印预测结果
print(f"Prediction on training set:\n {linear_model.predict(X_train)[:4]}") #获取列表前四个值的预测结果
#手动计算预测值并打印
print(f"prediction using w,b:\n {X_train @ w+b[:4]}")
#打印前四个样本的真是预测目标值
print(f"Target values \n {y_train[:4]}")
#最后使用模型进行特定样本预测
x_house = np.array([1200, 3, 1, 40]).reshape(-1, 4)
x_house_predict = linear_model.predict(x_house)[0]
print(f"predicted price of a house with 1200 sqft, 3 bedrooms,1 floor and 40 years old = ${x_house_predict*1000:.2f}")
