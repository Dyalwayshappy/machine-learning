#packages
import numpy as np
import matplotlib.pyplot as plt
#from public_tests import *

#help a company identify the mushroom is edible or posionous
#the features is （cap color（brown or red）， stalk shape（tapering or enlarging），solitary（是否独自生长））
#data set
#(first 1 means 'brown', 0 means 'red')(second 1 means 'tapering', 0 means 'enlarging')(third 1 means 'yes', 0 means 'no')
X_train = np.array([[1,1,1],[1,0,1],[1,0,0],[1,0,0],[1,1,1],[0,1,1],[0,0,0],[1,0,1],[0,1,0],[1,0,0]])
y_train = np.array([1,1,0,0,1,0,0,1,1,0])
#check the data
#print("First few elements of X_train:\n", X_train[:5])
#print("Type of X_train:",type(X_train))

#print("First few elements of y_train:", y_train[:5])
#print("Type of y_train:",type(y_train))
#check the dimensions of the data
print ('The shape of X_train is:', X_train.shape)
print ('The shape of y_train is: ', y_train.shape)
print ('Number of training examples (m):', len(X_train))


def compute_entropy(y):
    entropy = 0.

    ### START CODE HERE ###
    if len(y) != 0:
        p1 = len(y[y==1]) / len(y) #将p1转化为概率值
        if p1 != 0 and p1 != 1:
            entropy = -p1 * np.log2(p1) - (1 - p1) * np.log2(1 - p1)
        else:
            entropy = 0
    ### END CODE HERE ###
    return entropy

# Compute entropy at the root node (with all examples)
# Since we have 5 edible and 5 non-edible mushrooms, the entropy should be 1"
print("Entropy at root node: ", compute_entropy(y_train))
