#用scikit-learn使用梯度下降实现线性回归
import numpy as np
    
np.set_printoptions(precision=2)
from sklearn.linear_model import LinearRegression, SGDRegressor
from sklearn.preprocessing import StandardScaler
from lab_utils_multi import load_house_data
import matplotlib.pyplot as plt
dlblue = '#0096ff'; dlorange = '#FF9300'; dldarkred='#C00000'; dlmagenta='#FF40FF'; dlpurple='#7030A0';
#上面定义了五种颜色
plt.style.use('./deeplearning.mplstyle')
#scikit自带一个gradient descent模型，与之前的模型一样，模型的结果在标准化输入时结果最佳，之前的z-score在这里叫做standard score
X_train, y_train = load_house_data()
X_features = ['size(sqft)', 'bedrooms', 'floors', 'age']
#下来用模型标准化数据
scaler = StandardScaler()
X_norm = scaler.fit_transform(X_train)
print(f"Peak to Peak range by column in Raw            X:{np.ptp(X_train,axis=0)} ")
print(f"Peak to Peak range by column in Normalized     X:{np.ptp(X_norm, axis=0)} ")
#np.ptp对所有数据求最大值和最小值的差值

